{"uid":"b6a31aeab1cbf680","name":"Update category with invalid data fails","fullName":"tests.categories.test_categories.TestCategories#test_update_category_with_wrong_data","historyId":"9c28666002fd8bc49fde3d7d57328701","time":{"start":1761934044020,"stop":1761934044196,"duration":176},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].","statusTrace":"self = <test_categories.TestCategories object at 0x000001D3F7EEEC50>\ncategory_client = <clients.categories.categories_client.CategoryClient object at 0x000001D3F805BA80>\nfunction_category = CategoryFixture(request=CreateCategoryRequestSchema(name='Leg three', image='https://www.norman.com/app/categories/cat...25, 10, 31, 18, 7, 24, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 24, tzinfo=TzInfo(UTC))))\npayload = {'image': ''}\nmessage = ['image should not be empty', 'image must be a URL address']\n\n    @allure.story(AllureStory.VALIDATE_ENTITY)\n    @allure.title(\"Update category with invalid data fails\")\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.parametrize(\n        \"payload, message\",\n        test_data.category_invalid_data,\n        ids=test_data.category_invalid_ids\n    )\n    def test_update_category_with_wrong_data(\n            self,\n            category_client: CategoryClient,\n            function_category: CategoryFixture,\n            payload,\n            message\n    ):\n        request = UpdateCategoryRequestSchema(name=None, image=None).model_copy(update=payload)\n        response = category_client.update_category_api(function_category.response.id, request)\n        response_data = ErrorResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.BAD_REQUEST)\n>       assert_update_category_with_wrong_data_response(response_data, message)\n\ntests\\categories\\test_categories.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\categories.py:59: in assert_update_category_with_wrong_data_response\n    assert_invalid_data_response(actual, error_messages)\ntools\\assertions\\errors.py:47: in assert_invalid_data_response\n    assert_error_response(actual, expected)\ntools\\assertions\\errors.py:27: in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = ['image must be a URL address']\nexpected = ['image should not be empty', 'image must be a URL address']\nname = 'message'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].\n\ntools\\assertions\\base.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761934038701,"stop":1761934038702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_global_logger","time":{"start":1761934038702,"stop":1761934038702,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"attach_logs_to_allure","time":{"start":1761934043136,"stop":1761934043137,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"category_client","time":{"start":1761934043137,"stop":1761934043389,"duration":252},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_category","time":{"start":1761934043389,"stop":1761934044019,"duration":630},"status":"passed","steps":[{"name":"Create category","time":{"start":1761934043390,"stop":1761934044019,"duration":629},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/categories'","time":{"start":1761934043390,"stop":1761934044019,"duration":629},"status":"passed","steps":[],"attachments":[{"uid":"767c07b2beefee37","name":"cURL command","source":"767c07b2beefee37.txt","type":"text/plain","size":393}],"parameters":[{"name":"url","value":"'api/v1/categories'"},{"name":"json","value":"{'name': 'Leg three', 'image': 'https://www.norman.com/app/categories/categoryterms.php'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateCategoryRequestSchema(name='Leg three', image='https://www.norman.com/app/categories/categoryterms.php')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].","statusTrace":"self = <test_categories.TestCategories object at 0x000001D3F7EEEC50>\ncategory_client = <clients.categories.categories_client.CategoryClient object at 0x000001D3F805BA80>\nfunction_category = CategoryFixture(request=CreateCategoryRequestSchema(name='Leg three', image='https://www.norman.com/app/categories/cat...25, 10, 31, 18, 7, 24, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 24, tzinfo=TzInfo(UTC))))\npayload = {'image': ''}\nmessage = ['image should not be empty', 'image must be a URL address']\n\n    @allure.story(AllureStory.VALIDATE_ENTITY)\n    @allure.title(\"Update category with invalid data fails\")\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.parametrize(\n        \"payload, message\",\n        test_data.category_invalid_data,\n        ids=test_data.category_invalid_ids\n    )\n    def test_update_category_with_wrong_data(\n            self,\n            category_client: CategoryClient,\n            function_category: CategoryFixture,\n            payload,\n            message\n    ):\n        request = UpdateCategoryRequestSchema(name=None, image=None).model_copy(update=payload)\n        response = category_client.update_category_api(function_category.response.id, request)\n        response_data = ErrorResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.BAD_REQUEST)\n>       assert_update_category_with_wrong_data_response(response_data, message)\n\ntests\\categories\\test_categories.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\categories.py:59: in assert_update_category_with_wrong_data_response\n    assert_invalid_data_response(actual, error_messages)\ntools\\assertions\\errors.py:47: in assert_invalid_data_response\n    assert_error_response(actual, expected)\ntools\\assertions\\errors.py:27: in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = ['image must be a URL address']\nexpected = ['image should not be empty', 'image must be a URL address']\nname = 'message'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].\n\ntools\\assertions\\base.py:39: AssertionError","steps":[{"name":"Update category","time":{"start":1761934044020,"stop":1761934044191,"duration":171},"status":"passed","steps":[{"name":"Make PUT request to 'api/v1/categories/564'","time":{"start":1761934044020,"stop":1761934044191,"duration":171},"status":"passed","steps":[],"attachments":[{"uid":"53caa8a1afc3f32d","name":"cURL command","source":"53caa8a1afc3f32d.txt","type":"text/plain","size":322}],"parameters":[{"name":"url","value":"'api/v1/categories/564'"},{"name":"json","value":"{'image': ''}"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"category_id","value":"564"},{"name":"request","value":"UpdateCategoryRequestSchema(name=None, image='')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equal to <HTTPStatus.BAD_REQUEST: 400>","time":{"start":1761934044191,"stop":1761934044192,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"400"},{"name":"expected","value":"<HTTPStatus.BAD_REQUEST: 400>"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check update category with invalid data response","time":{"start":1761934044192,"stop":1761934044195,"duration":3},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\categories.py\", line 59, in assert_update_category_with_wrong_data_response\n    assert_invalid_data_response(actual, error_messages)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 47, in assert_invalid_data_response\n    assert_error_response(actual, expected)\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 27, in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check error response for invalid data request","time":{"start":1761934044192,"stop":1761934044195,"duration":3},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 47, in assert_invalid_data_response\n    assert_error_response(actual, expected)\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 27, in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check error response","time":{"start":1761934044192,"stop":1761934044194,"duration":2},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 27, in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check that 'status_code' equal to 400","time":{"start":1761934044192,"stop":1761934044192,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"400"},{"name":"expected","value":"400"},{"name":"name","value":"'status_code'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'error' equal to 'Bad Request'","time":{"start":1761934044192,"stop":1761934044193,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"'Bad Request'"},{"name":"expected","value":"'Bad Request'"},{"name":"name","value":"'error'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'message' equal to ['image should not be empty', 'image must be a URL address']","time":{"start":1761934044193,"stop":1761934044193,"duration":0},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"['image must be a URL address']"},{"name":"expected","value":"['image should not be empty', 'image must be a URL address']"},{"name":"name","value":"'message'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"ErrorResponseSchema(message=['image must be a URL address'], error='Bad Request', status_code=400)"},{"name":"expected","value":"ErrorResponseSchema(message=['image should not be empty', 'image must be a URL address'], error='Bad Request', status_code=400)"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":3,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"ErrorResponseSchema(message=['image must be a URL address'], error='Bad Request', status_code=400)"},{"name":"error_messages","value":"['image should not be empty', 'image must be a URL address']"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"ErrorResponseSchema(message=['image must be a URL address'], error='Bad Request', status_code=400)"},{"name":"error_messages","value":"['image should not be empty', 'image must be a URL address']"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"attach_logs_to_allure::0","time":{"start":1761934044205,"stop":1761934044206,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"327d1b0077bbfff","name":"logs","source":"327d1b0077bbfff.txt","type":"text/plain","size":1268}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Validate entity"},{"name":"epic","value":"Store service"},{"name":"feature","value":"Categories"},{"name":"tag","value":"categories"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.categories"},{"name":"suite","value":"test_categories"},{"name":"subSuite","value":"TestCategories"},{"name":"host","value":"Kompukter"},{"name":"thread","value":"12112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.categories.test_categories"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"message","value":"['image should not be empty', 'image must be a URL address']"},{"name":"payload","value":"{'image': ''}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"8701f3de5a86bbb0","status":"failed","statusDetails":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].","time":{"start":1761933967212,"stop":1761933967365,"duration":153}},{"uid":"efae88f4afb9af80","status":"failed","statusDetails":"AssertionError: Incorrect value: \"message\". Expected value: ['image should not be empty', 'image must be a URL address']. Actual value: ['image must be a URL address'].","time":{"start":1761933879510,"stop":1761933879668,"duration":158}}]},"tags":["regression","categories"]},"source":"b6a31aeab1cbf680.json","parameterValues":["['image should not be empty', 'image must be a URL address']","{'image': ''}"]}