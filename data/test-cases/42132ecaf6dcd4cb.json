{"uid":"42132ecaf6dcd4cb","name":"Non-existing email is available","fullName":"tests.users.test_users.TestUsers#test_not_existing_email_availability","historyId":"2b2de8cf96564606f5728f78d27c2167","time":{"start":1761934066309,"stop":1761934066462,"duration":153},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.","statusTrace":"self = <test_users.TestUsers object at 0x000001EAC6E0BC50>\nuser_client = <clients.users.users_client.UserClient object at 0x000001EAC709E250>\nfunction_user = UserFixture(request=CreateUserRequestSchema(name='Jerry', email='jesse24@example.org', password='e0PkOrmdtL', avatar='...esse24@example.org', password='e0PkOrmdtL', avatar=HttpUrl('https://www.wright-harper.com/list/explore/listmain.htm')))\n\n    @allure.story(AllureStory.CHECK_ENTITY)\n    @allure.title(\"Non-existing email is available\")\n    @allure.severity(Severity.CRITICAL)\n    def test_not_existing_email_availability(self, user_client: UserClient, function_user: UserFixture):\n        request = EmailAvailabilityRequestSchema()\n        response = user_client.check_email_availability_api(request)\n        response_data = EmailAvailabilityResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.CREATED)\n>       assert_email_availability_response(response_data, True)\n\ntests\\users\\test_users.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\users.py:144: in assert_email_availability_response\n    assert_equal(request.is_available, expected, \"email availability\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = False, expected = True, name = 'email availability'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.\n\ntools\\assertions\\base.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761934038701,"stop":1761934038702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_global_logger","time":{"start":1761934038702,"stop":1761934038702,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"attach_logs_to_allure","time":{"start":1761934065301,"stop":1761934065302,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_client","time":{"start":1761934065302,"stop":1761934065598,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_user","time":{"start":1761934065599,"stop":1761934066309,"duration":710},"status":"passed","steps":[{"name":"Create user","time":{"start":1761934065599,"stop":1761934066309,"duration":710},"status":"passed","steps":[],"attachments":[{"uid":"723e60f2b10abbb4","name":"cURL command","source":"723e60f2b10abbb4.txt","type":"text/plain","size":440}],"parameters":[{"name":"request","value":"CreateUserRequestSchema(name='Jerry', email='jesse24@example.org', password='e0PkOrmdtL', avatar='https://www.wright-harper.com/list/explore/listmain.htm')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.","statusTrace":"self = <test_users.TestUsers object at 0x000001EAC6E0BC50>\nuser_client = <clients.users.users_client.UserClient object at 0x000001EAC709E250>\nfunction_user = UserFixture(request=CreateUserRequestSchema(name='Jerry', email='jesse24@example.org', password='e0PkOrmdtL', avatar='...esse24@example.org', password='e0PkOrmdtL', avatar=HttpUrl('https://www.wright-harper.com/list/explore/listmain.htm')))\n\n    @allure.story(AllureStory.CHECK_ENTITY)\n    @allure.title(\"Non-existing email is available\")\n    @allure.severity(Severity.CRITICAL)\n    def test_not_existing_email_availability(self, user_client: UserClient, function_user: UserFixture):\n        request = EmailAvailabilityRequestSchema()\n        response = user_client.check_email_availability_api(request)\n        response_data = EmailAvailabilityResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.CREATED)\n>       assert_email_availability_response(response_data, True)\n\ntests\\users\\test_users.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\users.py:144: in assert_email_availability_response\n    assert_equal(request.is_available, expected, \"email availability\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = False, expected = True, name = 'email availability'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.\n\ntools\\assertions\\base.py:39: AssertionError","steps":[{"name":"Check email availability","time":{"start":1761934066309,"stop":1761934066460,"duration":151},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/users/is-available'","time":{"start":1761934066309,"stop":1761934066460,"duration":151},"status":"passed","steps":[],"attachments":[{"uid":"3e5faa81ab040568","name":"cURL command","source":"3e5faa81ab040568.txt","type":"text/plain","size":352}],"parameters":[{"name":"url","value":"'api/v1/users/is-available'"},{"name":"json","value":"{'email': 'christopher79@example.org'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"EmailAvailabilityRequestSchema(email='christopher79@example.org')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equal to <HTTPStatus.CREATED: 201>","time":{"start":1761934066460,"stop":1761934066460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"201"},{"name":"expected","value":"<HTTPStatus.CREATED: 201>"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check email availability response","time":{"start":1761934066460,"stop":1761934066461,"duration":1},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\users.py\", line 144, in assert_email_availability_response\n    assert_equal(request.is_available, expected, \"email availability\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check that 'email availability' equal to True","time":{"start":1761934066461,"stop":1761934066461,"duration":0},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"False"},{"name":"expected","value":"True"},{"name":"name","value":"'email availability'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"EmailAvailabilityResponseSchema(is_available=False)"},{"name":"expected","value":"True"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":5,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"attach_logs_to_allure::0","time":{"start":1761934066470,"stop":1761934066470,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"c2652115fb225a88","name":"logs","source":"c2652115fb225a88.txt","type":"text/plain","size":820}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"severity","value":"critical"},{"name":"epic","value":"Users service"},{"name":"story","value":"Check entity"},{"name":"feature","value":"Users"},{"name":"tag","value":"users"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.users"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsers"},{"name":"host","value":"Kompukter"},{"name":"thread","value":"15996-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.users.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"c90efbacf8bbb766","status":"failed","statusDetails":"AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.","time":{"start":1761933990063,"stop":1761933990215,"duration":152}},{"uid":"5488d15ad2d5ae5a","status":"failed","statusDetails":"AssertionError: Incorrect value: \"email availability\". Expected value: True. Actual value: False.","time":{"start":1761933903280,"stop":1761933903433,"duration":153}}]},"tags":["regression","users"]},"source":"42132ecaf6dcd4cb.json","parameterValues":[]}