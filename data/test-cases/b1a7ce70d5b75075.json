{"uid":"b1a7ce70d5b75075","name":"Get product by slug","fullName":"tests.products.test_products.TestProducts#test_get_product_by_slug","historyId":"a98f261782b58753d353e8fe04584937","time":{"start":1761934054753,"stop":1761934054907,"duration":154},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.","statusTrace":"self = <test_products.TestProducts object at 0x000002936FE923F0>\nproducts_client = <clients.products.products_client.ProductsClient object at 0x000002937005F890>\nfunction_product = ProductFixture(request=CreateProductRequestSchema(title='Factor third', price=5658.34, description='Two if live wester...25, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC))))\n\n    @allure.story(AllureStory.GET_ENTITY)\n    @allure.title(\"Get product by slug\")\n    @allure.severity(Severity.NORMAL)\n    def test_get_product_by_slug(self, products_client: ProductsClient, function_product: ProductFixture):\n        response = products_client.get_product_by_slug_api(slug=function_product.response.slug)\n        response_data = GetProductResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n>       assert_get_product_response(response_data, function_product.response)\n\ntests\\products\\test_products.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\products.py:98: in assert_get_product_response\n    assert_product(actual, expected)\ntools\\assertions\\products.py:79: in assert_product\n    assert_equal(actual.price, expected.price, \"price\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 5658, expected = 5658.34, name = 'price'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.\n\ntools\\assertions\\base.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761934038701,"stop":1761934038702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_global_logger","time":{"start":1761934038702,"stop":1761934038702,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"attach_logs_to_allure","time":{"start":1761934052827,"stop":1761934052828,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"products_client","time":{"start":1761934052828,"stop":1761934053172,"duration":344},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"category_client","time":{"start":1761934053172,"stop":1761934053414,"duration":242},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_category","time":{"start":1761934053414,"stop":1761934053988,"duration":574},"status":"passed","steps":[{"name":"Create category","time":{"start":1761934053414,"stop":1761934053988,"duration":574},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/categories'","time":{"start":1761934053414,"stop":1761934053988,"duration":574},"status":"passed","steps":[],"attachments":[{"uid":"5b27d6f0ce84e665","name":"cURL command","source":"5b27d6f0ce84e665.txt","type":"text/plain","size":400}],"parameters":[{"name":"url","value":"'api/v1/categories'"},{"name":"json","value":"{'name': 'Amount interesting author', 'image': 'http://sharp.com/explore/list/bloghomepage.htm'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateCategoryRequestSchema(name='Amount interesting author', image='http://sharp.com/explore/list/bloghomepage.htm')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"function_product","time":{"start":1761934053988,"stop":1761934054753,"duration":765},"status":"passed","steps":[{"name":"Create product","time":{"start":1761934053989,"stop":1761934054753,"duration":764},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/products'","time":{"start":1761934053989,"stop":1761934054752,"duration":763},"status":"passed","steps":[],"attachments":[{"uid":"c4bec5a83d13488b","name":"cURL command","source":"c4bec5a83d13488b.txt","type":"text/plain","size":601}],"parameters":[{"name":"url","value":"'api/v1/products'"},{"name":"json","value":"{'title': 'Factor third', 'price': 5658.34, 'description': 'Two if live western alone pretty green.', 'categoryId': 577, 'images': ['http://www.turner.net/posts/wp-contentindex.html', 'https://lee.org/tag/tagpost.htm', 'http://www.knight.com/appterms.html', 'http://calhoun.biz/list/categoriesprivacy.htm']}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateProductRequestSchema(title='Factor third', price=5658.34, description='Two if live western alone pretty green.', category_id=577, images=['http://www.turner.net/posts/wp-contentindex.html', 'https://lee.org/tag/tagpost.htm', 'http://www.knight.com/appterms.html', 'http://calhoun.biz/list/categoriesprivacy.htm'])"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.","statusTrace":"self = <test_products.TestProducts object at 0x000002936FE923F0>\nproducts_client = <clients.products.products_client.ProductsClient object at 0x000002937005F890>\nfunction_product = ProductFixture(request=CreateProductRequestSchema(title='Factor third', price=5658.34, description='Two if live wester...25, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC))))\n\n    @allure.story(AllureStory.GET_ENTITY)\n    @allure.title(\"Get product by slug\")\n    @allure.severity(Severity.NORMAL)\n    def test_get_product_by_slug(self, products_client: ProductsClient, function_product: ProductFixture):\n        response = products_client.get_product_by_slug_api(slug=function_product.response.slug)\n        response_data = GetProductResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n>       assert_get_product_response(response_data, function_product.response)\n\ntests\\products\\test_products.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\products.py:98: in assert_get_product_response\n    assert_product(actual, expected)\ntools\\assertions\\products.py:79: in assert_product\n    assert_equal(actual.price, expected.price, \"price\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 5658, expected = 5658.34, name = 'price'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.\n\ntools\\assertions\\base.py:39: AssertionError","steps":[{"name":"Get product by slug 'factor-third'","time":{"start":1761934054753,"stop":1761934054904,"duration":151},"status":"passed","steps":[{"name":"Make GET request to 'api/v1/products/slug/factor-third'","time":{"start":1761934054753,"stop":1761934054904,"duration":151},"status":"passed","steps":[],"attachments":[{"uid":"669b01dd4f3d8cd4","name":"cURL command","source":"669b01dd4f3d8cd4.txt","type":"text/plain","size":244}],"parameters":[{"name":"url","value":"'api/v1/products/slug/factor-third'"},{"name":"params","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"slug","value":"'factor-third'"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equal to <HTTPStatus.OK: 200>","time":{"start":1761934054904,"stop":1761934054904,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"200"},{"name":"expected","value":"<HTTPStatus.OK: 200>"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check get product response","time":{"start":1761934054904,"stop":1761934054906,"duration":2},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\products.py\", line 98, in assert_get_product_response\n    assert_product(actual, expected)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\products.py\", line 79, in assert_product\n    assert_equal(actual.price, expected.price, \"price\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check product","time":{"start":1761934054905,"stop":1761934054906,"duration":1},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\products.py\", line 79, in assert_product\n    assert_equal(actual.price, expected.price, \"price\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check that 'id' equal to 518","time":{"start":1761934054905,"stop":1761934054905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"518"},{"name":"expected","value":"518"},{"name":"name","value":"'id'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'title' equal to 'Factor third'","time":{"start":1761934054905,"stop":1761934054905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"'Factor third'"},{"name":"expected","value":"'Factor third'"},{"name":"name","value":"'title'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'slug' equal to 'factor-third'","time":{"start":1761934054905,"stop":1761934054905,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"'factor-third'"},{"name":"expected","value":"'factor-third'"},{"name":"name","value":"'slug'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'price' equal to 5658.34","time":{"start":1761934054905,"stop":1761934054906,"duration":1},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"price\". Expected value: 5658.34. Actual value: 5658.\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"5658"},{"name":"expected","value":"5658.34"},{"name":"name","value":"'price'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"GetProductResponseSchema(id=518, title='Factor third', slug='factor-third', price=5658, description='Two if live western alone pretty green.', category=CategorySchema(id=577, name='Amount interesting author', slug='amount-interesting-author', image=HttpUrl('http://sharp.com/explore/list/bloghomepage.htm'), creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC))), images=[HttpUrl('http://www.turner.net/posts/wp-contentindex.html'), HttpUrl('https://lee.org/tag/tagpost.htm'), HttpUrl('http://www.knight.com/appterms.html'), HttpUrl('http://calhoun.biz/list/categoriesprivacy.htm')], creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)))"},{"name":"expected","value":"CreateProductResponseSchema(id=518, title='Factor third', slug='factor-third', price=5658.34, description='Two if live western alone pretty green.', category=CategorySchema(id=577, name='Amount interesting author', slug='amount-interesting-author', image=HttpUrl('http://sharp.com/explore/list/bloghomepage.htm'), creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC))), images=[HttpUrl('http://www.turner.net/posts/wp-contentindex.html'), HttpUrl('https://lee.org/tag/tagpost.htm'), HttpUrl('http://www.knight.com/appterms.html'), HttpUrl('http://calhoun.biz/list/categoriesprivacy.htm')], creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)))"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"GetProductResponseSchema(id=518, title='Factor third', slug='factor-third', price=5658, description='Two if live western alone pretty green.', category=CategorySchema(id=577, name='Amount interesting author', slug='amount-interesting-author', image=HttpUrl('http://sharp.com/explore/list/bloghomepage.htm'), creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC))), images=[HttpUrl('http://www.turner.net/posts/wp-contentindex.html'), HttpUrl('https://lee.org/tag/tagpost.htm'), HttpUrl('http://www.knight.com/appterms.html'), HttpUrl('http://calhoun.biz/list/categoriesprivacy.htm')], creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)))"},{"name":"expected","value":"CreateProductResponseSchema(id=518, title='Factor third', slug='factor-third', price=5658.34, description='Two if live western alone pretty green.', category=CategorySchema(id=577, name='Amount interesting author', slug='amount-interesting-author', image=HttpUrl('http://sharp.com/explore/list/bloghomepage.htm'), creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC))), images=[HttpUrl('http://www.turner.net/posts/wp-contentindex.html'), HttpUrl('https://lee.org/tag/tagpost.htm'), HttpUrl('http://www.knight.com/appterms.html'), HttpUrl('http://calhoun.biz/list/categoriesprivacy.htm')], creation_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 34, tzinfo=TzInfo(UTC)))"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"attach_logs_to_allure::0","time":{"start":1761934054916,"stop":1761934054916,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"b8f89536ece4db9a","name":"logs","source":"b8f89536ece4db9a.txt","type":"text/plain","size":1437}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"story","value":"Get entity"},{"name":"severity","value":"normal"},{"name":"feature","value":"Products"},{"name":"epic","value":"Store service"},{"name":"tag","value":"products"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.products"},{"name":"suite","value":"test_products"},{"name":"subSuite","value":"TestProducts"},{"name":"host","value":"Kompukter"},{"name":"thread","value":"18516-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.products.test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"2aaa9fdf03271407","status":"failed","statusDetails":"AssertionError: Incorrect value: \"price\". Expected value: 8221.75. Actual value: 8221.","time":{"start":1761933977622,"stop":1761933977776,"duration":154}},{"uid":"4c004581bdc55e22","status":"failed","statusDetails":"AssertionError: Incorrect value: \"price\". Expected value: 3563.55. Actual value: 3563.","time":{"start":1761933891180,"stop":1761933891334,"duration":154}}]},"tags":["regression","products"]},"source":"b1a7ce70d5b75075.json","parameterValues":[]}