{"uid":"7251110a98770a5f","name":"Update product with invalid data fails","fullName":"tests.products.test_products.TestProducts#test_update_product_with_wrong_data","historyId":"a60acb23bc09dafdcb58fc400c38ae26","time":{"start":1761934055918,"stop":1761934056334,"duration":416},"status":"failed","statusMessage":"AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500","statusTrace":"self = <test_products.TestProducts object at 0x000001EAC6E0B950>\nproducts_client = <clients.products.products_client.ProductsClient object at 0x000001EAC7063A80>\nfunction_product = ProductFixture(request=CreateProductRequestSchema(title='Whether their', price=7456.41, description='Professor word ma...25, 10, 31, 18, 7, 36, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 36, tzinfo=TzInfo(UTC))))\npayload = {'description': ''}, message = ['description should not be empty']\n\n    @allure.story(AllureStory.VALIDATE_ENTITY)\n    @allure.title(\"Update product with invalid data fails\")\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.parametrize(\n        \"payload, message\",\n        test_data.product_invalid_data,\n        ids=test_data.product_invalid_ids\n    )\n    def test_update_product_with_wrong_data(\n            self,\n            products_client: ProductsClient,\n            function_product: ProductFixture,\n            payload,\n            message\n    ):\n        request = UpdateProductRequestSchema(title=None, price=None, description=None, images=None).model_copy(\n            update=payload)\n        response = products_client.update_product_api(function_product.response.id, request)\n        response_data = ErrorResponseSchema.model_validate_json(response.text)\n    \n>       assert_status_code(response.status_code, HTTPStatus.BAD_REQUEST)\n\ntests\\products\\test_products.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 500, expected = <HTTPStatus.BAD_REQUEST: 400>\n\n    @allure.step(\"Check that response status code equal to {expected}\")\n    def assert_status_code(actual: int, expected: int):\n        \"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому.\n    \n        :param actual: Фактический статус-код ответа.\n        :param expected: Ожидаемый статус-код.\n        :raises AssertionError: Если статус-коды не совпадают.\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect status code. '\n            f'Expected status code: {expected}. '\n            f'Actual status code: {actual}'\n        )\nE       AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500\n\ntools\\assertions\\base.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761934038701,"stop":1761934038702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_global_logger","time":{"start":1761934038702,"stop":1761934038702,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"attach_logs_to_allure","time":{"start":1761934054133,"stop":1761934054134,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"products_client","time":{"start":1761934054134,"stop":1761934054392,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"category_client","time":{"start":1761934054393,"stop":1761934054611,"duration":218},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_category","time":{"start":1761934054611,"stop":1761934055281,"duration":670},"status":"passed","steps":[{"name":"Create category","time":{"start":1761934054611,"stop":1761934055281,"duration":670},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/categories'","time":{"start":1761934054611,"stop":1761934055281,"duration":670},"status":"passed","steps":[],"attachments":[{"uid":"bc2ac280a6942969","name":"cURL command","source":"bc2ac280a6942969.txt","type":"text/plain","size":380}],"parameters":[{"name":"url","value":"'api/v1/categories'"},{"name":"json","value":"{'name': 'Tend despite police', 'image': 'https://combs.net/postsindex.jsp'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateCategoryRequestSchema(name='Tend despite police', image='https://combs.net/postsindex.jsp')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"function_product","time":{"start":1761934055281,"stop":1761934055918,"duration":637},"status":"passed","steps":[{"name":"Create product","time":{"start":1761934055283,"stop":1761934055917,"duration":634},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/products'","time":{"start":1761934055283,"stop":1761934055917,"duration":634},"status":"passed","steps":[],"attachments":[{"uid":"f4df13cb29f7d0ba","name":"cURL command","source":"f4df13cb29f7d0ba.txt","type":"text/plain","size":603}],"parameters":[{"name":"url","value":"'api/v1/products'"},{"name":"json","value":"{'title': 'Whether their', 'price': 7456.41, 'description': 'Professor word maybe about his any.', 'categoryId': 578, 'images': ['http://ford-kim.com/blog/category/searchlogin.html', 'http://joseph.info/categoryfaq.htm', 'https://campos.com/categoryregister.html', 'https://www.green.com/categoriesfaq.html']}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateProductRequestSchema(title='Whether their', price=7456.41, description='Professor word maybe about his any.', category_id=578, images=['http://ford-kim.com/blog/category/searchlogin.html', 'http://joseph.info/categoryfaq.htm', 'https://campos.com/categoryregister.html', 'https://www.green.com/categoriesfaq.html'])"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500","statusTrace":"self = <test_products.TestProducts object at 0x000001EAC6E0B950>\nproducts_client = <clients.products.products_client.ProductsClient object at 0x000001EAC7063A80>\nfunction_product = ProductFixture(request=CreateProductRequestSchema(title='Whether their', price=7456.41, description='Professor word ma...25, 10, 31, 18, 7, 36, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 36, tzinfo=TzInfo(UTC))))\npayload = {'description': ''}, message = ['description should not be empty']\n\n    @allure.story(AllureStory.VALIDATE_ENTITY)\n    @allure.title(\"Update product with invalid data fails\")\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.parametrize(\n        \"payload, message\",\n        test_data.product_invalid_data,\n        ids=test_data.product_invalid_ids\n    )\n    def test_update_product_with_wrong_data(\n            self,\n            products_client: ProductsClient,\n            function_product: ProductFixture,\n            payload,\n            message\n    ):\n        request = UpdateProductRequestSchema(title=None, price=None, description=None, images=None).model_copy(\n            update=payload)\n        response = products_client.update_product_api(function_product.response.id, request)\n        response_data = ErrorResponseSchema.model_validate_json(response.text)\n    \n>       assert_status_code(response.status_code, HTTPStatus.BAD_REQUEST)\n\ntests\\products\\test_products.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 500, expected = <HTTPStatus.BAD_REQUEST: 400>\n\n    @allure.step(\"Check that response status code equal to {expected}\")\n    def assert_status_code(actual: int, expected: int):\n        \"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому.\n    \n        :param actual: Фактический статус-код ответа.\n        :param expected: Ожидаемый статус-код.\n        :raises AssertionError: Если статус-коды не совпадают.\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect status code. '\n            f'Expected status code: {expected}. '\n            f'Actual status code: {actual}'\n        )\nE       AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500\n\ntools\\assertions\\base.py:20: AssertionError","steps":[{"name":"Update product","time":{"start":1761934055918,"stop":1761934056333,"duration":415},"status":"passed","steps":[{"name":"Make PUT request to 'api/v1/products/519'","time":{"start":1761934055918,"stop":1761934056333,"duration":415},"status":"passed","steps":[],"attachments":[{"uid":"4be109a9100047e7","name":"cURL command","source":"4be109a9100047e7.txt","type":"text/plain","size":326}],"parameters":[{"name":"url","value":"'api/v1/products/519'"},{"name":"json","value":"{'description': ''}"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"product_id","value":"519"},{"name":"request","value":"UpdateProductRequestSchema(title=None, price=None, description='', category_id=None, images=None)"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equal to <HTTPStatus.BAD_REQUEST: 400>","time":{"start":1761934056333,"stop":1761934056333,"duration":0},"status":"failed","statusMessage":"AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 20, in assert_status_code\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"500"},{"name":"expected","value":"<HTTPStatus.BAD_REQUEST: 400>"}],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"attach_logs_to_allure::0","time":{"start":1761934056431,"stop":1761934056432,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"681d616293dd5451","name":"logs","source":"681d616293dd5451.txt","type":"text/plain","size":883}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Products"},{"name":"severity","value":"normal"},{"name":"epic","value":"Store service"},{"name":"story","value":"Validate entity"},{"name":"tag","value":"products"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.products"},{"name":"suite","value":"test_products"},{"name":"subSuite","value":"TestProducts"},{"name":"host","value":"Kompukter"},{"name":"thread","value":"15996-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.products.test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"message","value":"['description should not be empty']"},{"name":"payload","value":"{'description': ''}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"903cfdf1fd4f34c9","status":"failed","statusDetails":"AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500","time":{"start":1761933979482,"stop":1761933979745,"duration":263}},{"uid":"676eda8328e7893a","status":"failed","statusDetails":"AssertionError: Incorrect status code. Expected status code: 400. Actual status code: 500","time":{"start":1761933892274,"stop":1761933892972,"duration":698}}]},"tags":["regression","products"]},"source":"7251110a98770a5f.json","parameterValues":["['description should not be empty']","{'description': ''}"]}