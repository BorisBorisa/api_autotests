{"uid":"23ef33c369c91583","name":"Update product with invalid data fails","fullName":"tests.products.test_products.TestProducts#test_update_product_with_wrong_data","historyId":"c0a72e0e26e8a0dd6120faf03351fd9e","time":{"start":1761934061799,"stop":1761934062143,"duration":344},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].","statusTrace":"self = <test_products.TestProducts object at 0x000002936FF0ABA0>\nproducts_client = <clients.products.products_client.ProductsClient object at 0x000002937003B650>\nfunction_product = ProductFixture(request=CreateProductRequestSchema(title='Leave particularly not', price=3526.3, description='Anything ...25, 10, 31, 18, 7, 41, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 41, tzinfo=TzInfo(UTC))))\npayload = {'description': '', 'images': [], 'price': 0, 'title': ''}\nmessage = ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']\n\n    @allure.story(AllureStory.VALIDATE_ENTITY)\n    @allure.title(\"Update product with invalid data fails\")\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.parametrize(\n        \"payload, message\",\n        test_data.product_invalid_data,\n        ids=test_data.product_invalid_ids\n    )\n    def test_update_product_with_wrong_data(\n            self,\n            products_client: ProductsClient,\n            function_product: ProductFixture,\n            payload,\n            message\n    ):\n        request = UpdateProductRequestSchema(title=None, price=None, description=None, images=None).model_copy(\n            update=payload)\n        response = products_client.update_product_api(function_product.response.id, request)\n        response_data = ErrorResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.BAD_REQUEST)\n>       assert_update_product_with_wrong_data_response(response_data, message)\n\ntests\\products\\test_products.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\products.py:62: in assert_update_product_with_wrong_data_response\n    assert_invalid_data_response(actual, error_messages)\ntools\\assertions\\errors.py:47: in assert_invalid_data_response\n    assert_error_response(actual, expected)\ntools\\assertions\\errors.py:27: in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = ['price must be a positive number', 'images must contain at least 1 elements']\nexpected = ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']\nname = 'message'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].\n\ntools\\assertions\\base.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1761934038701,"stop":1761934038702,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_global_logger","time":{"start":1761934038702,"stop":1761934038702,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"attach_logs_to_allure","time":{"start":1761934059687,"stop":1761934059688,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"products_client","time":{"start":1761934059688,"stop":1761934059932,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"category_client","time":{"start":1761934059932,"stop":1761934060240,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_category","time":{"start":1761934060240,"stop":1761934060866,"duration":626},"status":"passed","steps":[{"name":"Create category","time":{"start":1761934060241,"stop":1761934060866,"duration":625},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/categories'","time":{"start":1761934060241,"stop":1761934060866,"duration":625},"status":"passed","steps":[],"attachments":[{"uid":"df50725bada42571","name":"cURL command","source":"df50725bada42571.txt","type":"text/plain","size":396}],"parameters":[{"name":"url","value":"'api/v1/categories'"},{"name":"json","value":"{'name': 'Project show population between', 'image': 'https://moreno.info/tagcategory.html'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateCategoryRequestSchema(name='Project show population between', image='https://moreno.info/tagcategory.html')"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"function_product","time":{"start":1761934060866,"stop":1761934061798,"duration":932},"status":"passed","steps":[{"name":"Create product","time":{"start":1761934060866,"stop":1761934061798,"duration":932},"status":"passed","steps":[{"name":"Make POST request to 'api/v1/products'","time":{"start":1761934060867,"stop":1761934061798,"duration":931},"status":"passed","steps":[],"attachments":[{"uid":"c4ed1bc5c253c999","name":"cURL command","source":"c4ed1bc5c253c999.txt","type":"text/plain","size":490}],"parameters":[{"name":"url","value":"'api/v1/products'"},{"name":"json","value":"{'title': 'Leave particularly not', 'price': 3526.3, 'description': 'Anything region green dinner whether partner price.', 'categoryId': 585, 'images': ['https://nguyen.net/blogcategory.html']}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateProductRequestSchema(title='Leave particularly not', price=3526.3, description='Anything region green dinner whether partner price.', category_id=585, images=['https://nguyen.net/blogcategory.html'])"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].","statusTrace":"self = <test_products.TestProducts object at 0x000002936FF0ABA0>\nproducts_client = <clients.products.products_client.ProductsClient object at 0x000002937003B650>\nfunction_product = ProductFixture(request=CreateProductRequestSchema(title='Leave particularly not', price=3526.3, description='Anything ...25, 10, 31, 18, 7, 41, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 10, 31, 18, 7, 41, tzinfo=TzInfo(UTC))))\npayload = {'description': '', 'images': [], 'price': 0, 'title': ''}\nmessage = ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']\n\n    @allure.story(AllureStory.VALIDATE_ENTITY)\n    @allure.title(\"Update product with invalid data fails\")\n    @allure.severity(Severity.NORMAL)\n    @pytest.mark.parametrize(\n        \"payload, message\",\n        test_data.product_invalid_data,\n        ids=test_data.product_invalid_ids\n    )\n    def test_update_product_with_wrong_data(\n            self,\n            products_client: ProductsClient,\n            function_product: ProductFixture,\n            payload,\n            message\n    ):\n        request = UpdateProductRequestSchema(title=None, price=None, description=None, images=None).model_copy(\n            update=payload)\n        response = products_client.update_product_api(function_product.response.id, request)\n        response_data = ErrorResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.BAD_REQUEST)\n>       assert_update_product_with_wrong_data_response(response_data, message)\n\ntests\\products\\test_products.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\assertions\\products.py:62: in assert_update_product_with_wrong_data_response\n    assert_invalid_data_response(actual, error_messages)\ntools\\assertions\\errors.py:47: in assert_invalid_data_response\n    assert_error_response(actual, expected)\ntools\\assertions\\errors.py:27: in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = ['price must be a positive number', 'images must contain at least 1 elements']\nexpected = ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']\nname = 'message'\n\n    @allure.step(\"Check that {name} equal to {expected}\")\n    def assert_equal(actual: Any, expected: Any, name: str):\n        \"\"\"\n        Проверяет, что фактическое значение равно ожидаемому.\n    \n        :param name: Название проверяемого значения.\n        :param actual: Фактическое значение.\n        :param expected: Ожидаемое значение.\n        :raises AssertionError: Если фактическое значение не равно ожидаемому.\n        \"\"\"\n        logger.info(f'Check that \"{name}\" equals to {expected}')\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect value: \"{name}\". '\n            f'Expected value: {expected}. '\n            f'Actual value: {actual}.'\n        )\nE       AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].\n\ntools\\assertions\\base.py:39: AssertionError","steps":[{"name":"Update product","time":{"start":1761934061799,"stop":1761934062139,"duration":340},"status":"passed","steps":[{"name":"Make PUT request to 'api/v1/products/526'","time":{"start":1761934061799,"stop":1761934062138,"duration":339},"status":"passed","steps":[],"attachments":[{"uid":"9a7c825bc1c96a6c","name":"cURL command","source":"9a7c825bc1c96a6c.txt","type":"text/plain","size":359}],"parameters":[{"name":"url","value":"'api/v1/products/526'"},{"name":"json","value":"{'title': '', 'price': 0, 'description': '', 'images': []}"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"product_id","value":"526"},{"name":"request","value":"UpdateProductRequestSchema(title='', price=0, description='', category_id=None, images=[])"}],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equal to <HTTPStatus.BAD_REQUEST: 400>","time":{"start":1761934062139,"stop":1761934062139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"400"},{"name":"expected","value":"<HTTPStatus.BAD_REQUEST: 400>"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check product update response with invalid data","time":{"start":1761934062139,"stop":1761934062142,"duration":3},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\products.py\", line 62, in assert_update_product_with_wrong_data_response\n    assert_invalid_data_response(actual, error_messages)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 47, in assert_invalid_data_response\n    assert_error_response(actual, expected)\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 27, in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check error response for invalid data request","time":{"start":1761934062139,"stop":1761934062141,"duration":2},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 47, in assert_invalid_data_response\n    assert_error_response(actual, expected)\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 27, in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check error response","time":{"start":1761934062139,"stop":1761934062140,"duration":1},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\errors.py\", line 27, in assert_error_response\n    assert_equal(actual.message, expected.message, \"message\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Check that 'status_code' equal to 400","time":{"start":1761934062139,"stop":1761934062140,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"400"},{"name":"expected","value":"400"},{"name":"name","value":"'status_code'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'error' equal to 'Bad Request'","time":{"start":1761934062140,"stop":1761934062140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"'Bad Request'"},{"name":"expected","value":"'Bad Request'"},{"name":"name","value":"'error'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Check that 'message' equal to ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']","time":{"start":1761934062140,"stop":1761934062140,"duration":0},"status":"failed","statusMessage":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].\n","statusTrace":"  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\borbo\\PycharmProjects\\api_autotests\\tools\\assertions\\base.py\", line 39, in assert_equal\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"['price must be a positive number', 'images must contain at least 1 elements']"},{"name":"expected","value":"['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']"},{"name":"name","value":"'message'"}],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"ErrorResponseSchema(message=['price must be a positive number', 'images must contain at least 1 elements'], error='Bad Request', status_code=400)"},{"name":"expected","value":"ErrorResponseSchema(message=['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements'], error='Bad Request', status_code=400)"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":3,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"ErrorResponseSchema(message=['price must be a positive number', 'images must contain at least 1 elements'], error='Bad Request', status_code=400)"},{"name":"error_messages","value":"['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"actual","value":"ErrorResponseSchema(message=['price must be a positive number', 'images must contain at least 1 elements'], error='Bad Request', status_code=400)"},{"name":"error_messages","value":"['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"attach_logs_to_allure::0","time":{"start":1761934062170,"stop":1761934062171,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"2a1f1b6270fe8df1","name":"logs","source":"2a1f1b6270fe8df1.txt","type":"text/plain","size":1596}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Products"},{"name":"story","value":"Validate entity"},{"name":"epic","value":"Store service"},{"name":"tag","value":"products"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.products"},{"name":"suite","value":"test_products"},{"name":"subSuite","value":"TestProducts"},{"name":"host","value":"Kompukter"},{"name":"thread","value":"18516-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.products.test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"message","value":"['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']"},{"name":"payload","value":"{'title': '', 'price': 0, 'description': '', 'images': []}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"d964af09ef4245e0","status":"failed","statusDetails":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].","time":{"start":1761933984534,"stop":1761933984878,"duration":344}},{"uid":"7fca74f48abf8e4c","status":"failed","statusDetails":"AssertionError: Incorrect value: \"message\". Expected value: ['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']. Actual value: ['price must be a positive number', 'images must contain at least 1 elements'].","time":{"start":1761933897506,"stop":1761933897861,"duration":355}}]},"tags":["regression","products"]},"source":"23ef33c369c91583.json","parameterValues":["['title should not be empty', 'price must be a positive number', 'description should not be empty', 'images must contain at least 1 elements']","{'title': '', 'price': 0, 'description': '', 'images': []}"]}